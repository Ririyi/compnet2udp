#define _WINSOCK_DEPRECATED_NO_WARNINGS

#include <winsock2.h>
#include <string>
#include <windows.h>
#include <iostream>

#pragma comment(lib, "ws2_32.lib")
#pragma warning(disable: 4996)

using namespace std;

#define PORT 666
#define SERVERADDR "127.0.0.1" // IP-адрес сервера

int main() {
    char buff[10 * 1014];
    cout << "UDP Demo Client\nType quit to quit\n";

    //иницилизация библиотеки Winsocks
    if (WSAStartup(MAKEWORD(2, 2), (WSADATA*)&buff) != 0) {
        cout << "WSASTARTUP ERROR: " << WSAGetLastError() << "\n";
        return -1;
    }

    //открытие сокета
    SOCKET my_sock = socket(AF_INET, SOCK_DGRAM, 0);
    if (my_sock == INVALID_SOCKET) {
        cout << "SOCKET() ERROR: " << WSAGetLastError() << "\n";
        WSACleanup();
        return -1;
    }

    sockaddr_in Daddr;
    Daddr.sin_family = AF_INET;
    Daddr.sin_port = htons(PORT);

    if (inet_addr(SERVERADDR) != INADDR_NONE) {
        Daddr.sin_addr.s_addr = inet_addr(SERVERADDR);
    }
    else {
        HOSTENT* hst = gethostbyname(SERVERADDR);
        if (hst != nullptr) {
            Daddr.sin_addr.s_addr = *(reinterpret_cast<unsigned long*>(hst->h_addr_list[0]));
        }
        else {
            cout << "Unknown Host: " << WSAGetLastError() << "\n";
            closesocket(my_sock);
            WSACleanup();
            return -1;
        }
    }

    while (true) {
        // чтение сообщения с клавиатуры
        cout << "S<=C: ";
        string SS;
        getline(cin, SS);
        if (SS == "quit") break;

        // Передача сообщений на сервер
        sendto(my_sock, SS.c_str(), SS.size(), 0, (sockaddr*)&Daddr, sizeof(Daddr));

        // Прием сообщения с сервера
        sockaddr_in SRaddr;
        int SRaddr_size = sizeof(SRaddr);
        int n = recvfrom(my_sock, buff, sizeof(buff), 0, (sockaddr*)&SRaddr, &SRaddr_size);

        if (n == SOCKET_ERROR) {
            cout << "RECVFROM() ERROR: " << WSAGetLastError() << "\n";
            closesocket(my_sock);
            WSACleanup();
            return -1;
        }

        buff[n] = '\0';
        cout << "S=>C: " << buff << "\n";
    }
    closesocket(my_sock);
    WSACleanup();
    return 0;
}
